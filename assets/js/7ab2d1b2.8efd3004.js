"use strict";(self.webpackChunkribir_website=self.webpackChunkribir_website||[]).push([[234],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),d=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(p.Provider,{value:t},e.children)},m="mdxType",s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=d(n),u=r,f=m["".concat(p,".").concat(u)]||m[u]||s[u]||i;return n?a.createElement(f,o(o({ref:t},c),{},{components:n})):a.createElement(f,o({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[m]="string"==typeof e?e:r,o[1]=l;for(var d=2;d<i;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7804:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var a=n(7462),r=(n(7294),n(3905));const i={},o="Custom widget declare in macro.",l={unversionedId:"custom_widget_declare_in_macro",id:"custom_widget_declare_in_macro",title:"Custom widget declare in macro.",description:"You can declare any widget in widget! that implements the Declare trait. And Ribir provides a derive macro that makes implementing the Declare trait super easy.",source:"@site/../docs/custom_widget_declare_in_macro.md",sourceDirName:".",slug:"/custom_widget_declare_in_macro",permalink:"/docs/custom_widget_declare_in_macro",draft:!1,editUrl:"https://github.com/RibirX/Ribir/tree/master/website/../docs/custom_widget_declare_in_macro.md",tags:[],version:"current",lastUpdatedBy:"Adoo",lastUpdatedAt:1676124374,formattedLastUpdatedAt:"Feb 11, 2023",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Core principles",permalink:"/docs/advanced_topics/framework"}},p={},d=[{value:"Use <code>convert</code> meta to convert value from one type to another.",id:"use-convert-meta-to-convert-value-from-one-type-to-another",level:2},{value:"Use the <code>default</code> meta to provide a default value for a field when you declare it.",id:"use-the-default-meta-to-provide-a-default-value-for-a-field-when-you-declare-it",level:2}],c={toc:d};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"custom-widget-declare-in-macro"},"Custom widget declare in macro."),(0,r.kt)("p",null,"You can declare any widget in ",(0,r.kt)("inlineCode",{parentName:"p"},"widget!")," that implements the ",(0,r.kt)("inlineCode",{parentName:"p"},"Declare")," trait. And Ribir provides a derive macro that makes implementing the ",(0,r.kt)("inlineCode",{parentName:"p"},"Declare")," trait super easy."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Some tips"),(0,r.kt)("p",{parentName:"blockquote"},"Almost all widgets provided by ",(0,r.kt)("inlineCode",{parentName:"p"},"Ribir")," implement ",(0,r.kt)("inlineCode",{parentName:"p"},"Declare")," via derive. We shouldn't implement it ourselves unless we have a special reason. You can derive it directly. If you want to implement it yourself, read the ",(0,r.kt)("a",{parentName:"p",href:"declare_derive"},"derive macro document")," to see how it works.")),(0,r.kt)("p",null,"In this chapter, we'll learn how to use the meta of the ",(0,r.kt)("inlineCode",{parentName:"p"},"#[declare(...)]")," attribute on the field. And it will help us improve the declaration user experience on our widget."),(0,r.kt)("p",null,"Let's create a hero card widget. It contains a name, email, and phone. And the name is required, email and phone are optional."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'#[derive(Declare)]\nstruct HeroCard {\n name: String,\n tel: Option<String>,\n email: Option<String>,\n}\n\nimpl Compose for HeroCard {\n fn compose(this: State<Self>) -> Widget {\n   unreachable!("We don\'t care how implement `HeroCard` here, but focus on how to use it.")\n }\n}\n\nfn main() {\n let _ = widget!{\n   HeroCard {\n     name: "Mr Ribir".to_string(),\n     tel: None,\n     email: Some("ribir@XXX.com".to_string()),\n     margin: EdgeInsets::all(8.)\n   }\n };\n}\n')),(0,r.kt)("p",null,"After ",(0,r.kt)("inlineCode",{parentName:"p"},"HeroCard")," derives ",(0,r.kt)("inlineCode",{parentName:"p"},"Declare"),", it can be declared in ",(0,r.kt)("inlineCode",{parentName:"p"},"widget!")," and the built-in fields can be used in it. Looks good, but not enough. The declaration of ",(0,r.kt)("inlineCode",{parentName:"p"},"HeroCard")," is too lengthy."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Can we initialise ",(0,r.kt)("inlineCode",{parentName:"li"},"name")," directly with ",(0,r.kt)("inlineCode",{parentName:"li"},"&str"),"? Because ",(0,r.kt)("inlineCode",{parentName:"li"},"&str")," can be converted to ",(0,r.kt)("inlineCode",{parentName:"li"},"String"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"tel")," is initialised with None. Can we omit it?"),(0,r.kt)("li",{parentName:"ul"},"Can we remove the ",(0,r.kt)("inlineCode",{parentName:"li"},"Some")," from ",(0,r.kt)("inlineCode",{parentName:"li"},"email"),"? When we use a value to initialise an option type, it implicitly implies that it's a ",(0,r.kt)("inlineCode",{parentName:"li"},"Some-value"),".")),(0,r.kt)("p",null,"Of course we can use the meta of ",(0,r.kt)("inlineCode",{parentName:"p"},"#[declare(...)]"),". Let's introduce them one by one."),(0,r.kt)("h2",{id:"use-convert-meta-to-convert-value-from-one-type-to-another"},"Use ",(0,r.kt)("inlineCode",{parentName:"h2"},"convert")," meta to convert value from one type to another."),(0,r.kt)("p",null,"Let's start with the problems of ",(0,r.kt)("inlineCode",{parentName:"p"},"name")," accepting ",(0,r.kt)("inlineCode",{parentName:"p"},"&str")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"tel")," removing the ",(0,r.kt)("inlineCode",{parentName:"p"},"Some")," wrap. Both are type conversion problems."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"#[derive(Declare)]\nstruct HeroCard {\n  #[declare(convert=into)]            // new!\n  name: String,\n  #[declare(convert=strip_option)]    // new!\n  tel: Option<String>,\n  #[declare(convert=strip_option)]    // new!\n  email: Option<String>,\n}\n")),(0,r.kt)("p",null,"We just add ",(0,r.kt)("inlineCode",{parentName:"p"},"#[declare(convert=into)]")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"#[declare(convert=strip_option)]")," for the fields. That is all. Besides ",(0,r.kt)("inlineCode",{parentName:"p"},"into")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"strip_option")," there are two other values that can be used in ",(0,r.kt)("inlineCode",{parentName:"p"},"#[declare(convert=...)]"),". Let's look at them one by one."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"#[declare(convert=into)]"),", use ",(0,r.kt)("inlineCode",{parentName:"p"},"std::convert::Into")," to convert the value before initialising the field. With this meta, any type that implements an ",(0,r.kt)("inlineCode",{parentName:"p"},"Into")," trait on the field type can be used to initialise the field. ")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"#[declare(convert=strip_option)]"),", wrap ",(0,r.kt)("inlineCode",{parentName:"p"},"V")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"Some(V)")," before initialising ",(0,r.kt)("inlineCode",{parentName:"p"},"Option<V>"),", of course ",(0,r.kt)("inlineCode",{parentName:"p"},"Option<V>")," is also accepted.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("inlineCode",{parentName:"p"},"#[declare(convert=custom)]"),", implement the filed build by itself, implement the same name method for its declarer to accept the initialize type. Then implement a ",(0,r.kt)("inlineCode",{parentName:"p"},"set_declare_xxx")," method for its host type so that it can be updated with the type you want.  For example:"),(0,r.kt)("pre",{parentName:"li"},(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"#[Derive(Declare)]\nstruct Printer {\n  #[declare(convert=custom)]\n  debug: RefCell<Box<dyn Debug>>\n}\n\nimpl PrinterDeclarer {\n  pub fn debug(mut self, debug: impl Debug + 'static) -> Self {\n    self.debug = Some(RefCell::new(Box::new(debug)));\n    self\n  }\n}\n\nimpl Printer {\n  pub fn set_declare_cursor<C: IntoCursorIcon>(&mut self, icon: C) {\n    self.debug = RefCell::new(Box::new(debug));\n  }\n}\n")))),(0,r.kt)("h2",{id:"use-the-default-meta-to-provide-a-default-value-for-a-field-when-you-declare-it"},"Use the ",(0,r.kt)("inlineCode",{parentName:"h2"},"default")," meta to provide a default value for a field when you declare it."),(0,r.kt)("p",null,"We can use ",(0,r.kt)("inlineCode",{parentName:"p"},"#[declare(default)]")," to indicate that the field can be initialised by ","[",(0,r.kt)("inlineCode",{parentName:"p"},"std::default::Default"),"]","! if the user does not initialise it."),(0,r.kt)("p",null,"Let's update our code"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},"#[derive(Declare)]\nstruct HeroCard {\n #[declare(convert=into)]\n name: String,\n #[declare(convert=strip_option, default)]    // edit!\n tel: Option<String>,\n #[declare(convert=strip_option, default)]    // edit!\n email: Option<String>,\n}\n")),(0,r.kt)("p",null,"Now, we can declare ",(0,r.kt)("inlineCode",{parentName:"p"},"HeroCard")," as what we want."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-rust"},'let _ = widget!{\n  HeroCard {\n    name: "Mr Ribir",\n    email: "ribir@XXX.com".to_string(),\n    margin: EdgeInsets::all(8.)\n  }\n};\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Some tips"),(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("inlineCode",{parentName:"p"},"#[declare(default)]")," also supports accepting an expression as an init value instead of using ",(0,r.kt)("inlineCode",{parentName:"p"},"Default::Default")," directly. There are two identifiers you can use in your expression."),(0,r.kt)("ul",{parentName:"blockquote"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"self")," is the declarer, "),(0,r.kt)("li",{parentName:"ul"},"and ",(0,r.kt)("inlineCode",{parentName:"li"},"ctx")," is the build context of the widget. For the build context see ","[",(0,r.kt)("inlineCode",{parentName:"li"},"BuildCtx"),"]","!."))),(0,r.kt)("p",null,"There are two other ",(0,r.kt)("inlineCode",{parentName:"p"},"meta")," that we don't use in ",(0,r.kt)("inlineCode",{parentName:"p"},"HeroCard"),", but need to know about."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"We can use #","[declare(skip)]"," to skip the field that we don't want the user to declare. The field type must implement the ",(0,r.kt)("inlineCode",{parentName:"p"},"Default")," trait or provide a default expression through the ",(0,r.kt)("inlineCode",{parentName:"p"},"default")," meta.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"We can use #","[declare(rename=...)]"," to rename a field. It's useful if our field name conflicts with the built-in fields. See ",(0,r.kt)("a",{parentName:"p",href:"builtin_fields"},"all built-in fields"),"."))))}m.isMDXComponent=!0}}]);