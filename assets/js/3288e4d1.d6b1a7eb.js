"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8800],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>g});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},u=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(r),m=i,g=c["".concat(s,".").concat(m)]||c[m]||d[m]||a;return r?n.createElement(g,o(o({ref:t},u),{},{components:r})):n.createElement(g,o({ref:t},u))}));function g(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=r.length,o=new Array(a);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:i,o[1]=l;for(var p=2;p<a;p++)o[p]=r[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},409:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var n=r(7462),i=(r(7294),r(3905));const a={sidebar_position:1},o="Quick Start",l={unversionedId:"getting_started/quick-start",id:"getting_started/quick-start",title:"Quick Start",description:"Prerequisites",source:"@site/../docs/getting_started/quick-start.md",sourceDirName:"getting_started",slug:"/getting_started/quick-start",permalink:"/docs/getting_started/quick-start",draft:!1,editUrl:"https://github.com/RibirX/Ribir/tree/master/website/../docs/getting_started/quick-start.md",tags:[],version:"current",lastUpdatedBy:"sologeek",lastUpdatedAt:1674964251,formattedLastUpdatedAt:"Jan 29, 2023",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Getting Started",permalink:"/docs/category/getting-started"},next:{title:"Essentials",permalink:"/docs/category/essentials"}},s={},p=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Setting up Ribir",id:"setting-up-ribir",level:2},{value:"Starting with <code>main.rs</code>",id:"starting-with-mainrs",level:2},{value:"Run Application",id:"run-application",level:2}],u={toc:p};function c(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"quick-start"},"Quick Start"),(0,i.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,i.kt)("p",null,"The first step is to install Rust, and others system dependencies."),(0,i.kt)("p",null,"You can reference ",(0,i.kt)("a",{parentName:"p",href:"https://www.rust-lang.org/tools/install"},"official documentation"),"."),(0,i.kt)("h2",{id:"setting-up-ribir"},"Setting up Ribir"),(0,i.kt)("p",null,"The first you need create a new Rust Application."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"cargo new ribir-hello-world\ncd ribir-hello-world\n")),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Tips"),(0,i.kt)("p",{parentName:"blockquote"},"Ribir only support rust nightly version now. You can use ",(0,i.kt)("inlineCode",{parentName:"p"},"rustup override set nightly")," to switch channel. If you don't install nightly version, you can reference this ",(0,i.kt)("a",{parentName:"p",href:"https://rust-lang.github.io/rustup/concepts/channels.html"},"documentation"),".")),(0,i.kt)("p",null,"And next, edit the ",(0,i.kt)("inlineCode",{parentName:"p"},"Cargo.toml")," file and add Ribir dependencies:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-toml"},'[dependencies]\nribir = "0.0.1"\n')),(0,i.kt)("h2",{id:"starting-with-mainrs"},"Starting with ",(0,i.kt)("inlineCode",{parentName:"h2"},"main.rs")),(0,i.kt)("p",null,"Open ",(0,i.kt)("inlineCode",{parentName:"p"},"main.rs")," file by your editor and modify it like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-rust"},'// main.rs\nuse ribir::prelude::*;\n\nfn main() {\n  let hello_world = widget! {\n    Text { text: "Hello World" }\n  };\n\n  app::run(hello_world);\n}\n')),(0,i.kt)("h2",{id:"run-application"},"Run Application"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell"},"cargo run\n")),(0,i.kt)("p",null,"[todo: hello world demo show placeholder]"),(0,i.kt)("p",null,"Congratulations! You finish the first Ribir project."))}c.isMDXComponent=!0}}]);